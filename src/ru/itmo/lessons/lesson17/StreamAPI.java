package ru.itmo.lessons.lesson17;

import ru.itmo.lessons.lesson16.education.Course;

import java.util.*;

public class StreamAPI {
    public static void main(String[] args) {
        // TODO 1: Создать поток целых чисел (-560, 312, 12, -1, 45, 0, 0, 23, -2, 221)
        //  - оставить в потоке только отрицательные элементы
        //  - выбрать 5 первых элементов
        //  - возвести каждый элемент в квадрат
        //  - вывести каждый элемент в консоль


        // TODO 2: Создать поток целых чисел (-6, 45, 12, -77, 77, 45, 6, -6, 0, 0, 12)
        //  - оставить в потоке только уникальные элементы
        //  - отсортирует в натуральном порядке
        //  - вывести каждый элемент в консоль

        // TODO 3: anyMatch, allMatch, noneMatch
        //  - создать поток целых чисел (411, 7, 90, -1000, 0, 2, 71) и
        //    проверить, есть ли в потеке элемент со значением 0
        //  - создать поток целых чисел (411, 7, 90, -1000, 0, 2, 71) и
        //    проверить, состоит ли поток из только положительных элементов
        //  - создать поток целых чисел (411, 7, 90, -1000, 0, 2, 71) и
        //    проверить, что в потоке нет значений больше 10_000


        String[] colors = {"white", "black", "red", "yellow", "yellowgreen"};
        // TODO 4: findFirst - взять первый | findAny - взять произвольный


        // TODO 5: Создать поток из элементов массива colors
        //  - пропустить 2 первых элемента
        //  - оставить в потоке только цвета, начинающиеся на 'y'
        //  - вывести каждый элемент в консоль


        ArrayList<Course> courses = new ArrayList<>();
        courses.add(Course.getInstance());
        courses.add(Course.getInstance());
        courses.add(Course.getInstance());
        courses.add(Course.getInstance());
        courses.add(Course.getInstance());
        courses.add(Course.getInstance());

        // TODO 6: Создать поток из элементов списка course и выбрать минимальный по стоимости курс,
        //  вывести курс в консоль


        // TODO 7: Создать поток из элементов списка course и выбрать максимальный по продолжительности курс,
        //  вывести курс в консоль


        // TODO 7: на основе списка курсов получить массив курсов дороже 20000
        //  В итоге должен получиться массив Course[]


        // TODO 8: увеличить стоимость каждого курса с продолжительностью более 3х месяцев на 5000 (из списка course)
        //  В итоге должен получиться List<Course>

        // TODO 9:  на основе списка курсов создать множество, в который войдут курсы с продолжительностью
        //  меньше 4 месяцев.  В итоге должен получиться Set<Course>

        // TODO 10:  на основе списка курсов создать список, в который войдут уникальные курсы,
        //  отсортированные по стоимости и продолжительности.
        //  В итоге должен получиться ArrayList<Course>


        colors = new String[]{"blue", "orange", "brown", "white"};
        // TODO 11:  на основе массива colors создать мапу Map<String, Integer>,
        //  где ключи - элементы массива, значения - размер элемента массива


        String[][] strings = {
                {"45", "78", "-90", "0", "1"},
                {"441", "14", "28"},
                {"122", "-6", "10", "50"},
        };

        // TODO 12: В каждом вложенном массиве оставить только уникальные элементы, отсортировать каждый вложенный массив.
        //  В итоге должен получиться массив String[][]

        // TODO 13: На основе массива strings создать одномерный массив уникальных элементов, массив отсортировать.
        //  В итоге должен получиться массив String[]

    }
}
